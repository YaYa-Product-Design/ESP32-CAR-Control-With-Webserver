#include <WiFi.h>
#include <WebServer.h>

#define IN1_A 23  // Motor A Control Pin 1
#define IN2_A 22  // Motor A Control Pin 2
#define ENA_A 21  // Motor A Enable Pin (PWM)

#define IN3_A 19  // Motor B Control Pin 1
#define IN4_A 18  // Motor B Control Pin 2
#define ENB_A 17  // Motor B Enable Pin (PWM)

#define IN1_B 16  // Motor C Control Pin 1
#define IN2_B 15  // Motor C Control Pin 2
#define ENA_B 14  // Motor C Enable Pin (PWM)

#define IN3_B 13  // Motor D Control Pin 1
#define IN4_B 12  // Motor D Control Pin 2
#define ENB_B 27  // Motor D Enable Pin (PWM)

const char* ssid = "iPhone";
const char* password = "password";

WebServer server(80);

int speed = 255;  // Default speed

void handleMovement(String direction) {
  if (direction == "forward") {
    digitalWrite(IN1_A, HIGH);
    digitalWrite(IN2_A, LOW);
    analogWrite(ENA_A, speed);

    digitalWrite(IN3_A, HIGH);
    digitalWrite(IN4_A, LOW);
    analogWrite(ENB_A, speed);

    digitalWrite(IN1_B, HIGH);
    digitalWrite(IN2_B, LOW);
    analogWrite(ENA_B, speed);

    digitalWrite(IN3_B, HIGH);
    digitalWrite(IN4_B, LOW);
    analogWrite(ENB_B, speed);
  } else if (direction == "backward") {
    digitalWrite(IN1_A, LOW);
    digitalWrite(IN2_A, HIGH);
    analogWrite(ENA_A, speed);

    digitalWrite(IN3_A, LOW);
    digitalWrite(IN4_A, HIGH);
    analogWrite(ENB_A, speed);

    digitalWrite(IN1_B, LOW);
    digitalWrite(IN2_B, HIGH);
    analogWrite(ENA_B, speed);

    digitalWrite(IN3_B, LOW);
    digitalWrite(IN4_B, HIGH);
    analogWrite(ENB_B, speed);
  } else if (direction == "left") {
    digitalWrite(IN1_A, LOW);
    digitalWrite(IN2_A, HIGH);
    analogWrite(ENA_A, speed);

    digitalWrite(IN3_A, LOW);
    digitalWrite(IN4_A, HIGH);
    analogWrite(ENB_A, speed);

    digitalWrite(IN1_B, HIGH);
    digitalWrite(IN2_B, LOW);
    analogWrite(ENA_B, speed);

    digitalWrite(IN3_B, HIGH);
    digitalWrite(IN4_B, LOW);
    analogWrite(ENB_B, speed);
  } else if (direction == "right") {
    digitalWrite(IN1_A, HIGH);
    digitalWrite(IN2_A, LOW);
    analogWrite(ENA_A, speed);

    digitalWrite(IN3_A, HIGH);
    digitalWrite(IN4_A, LOW);
    analogWrite(ENB_A, speed);

    digitalWrite(IN1_B, LOW);
    digitalWrite(IN2_B, HIGH);
    analogWrite(ENA_B, speed);

    digitalWrite(IN3_B, LOW);
    digitalWrite(IN4_B, HIGH);
    analogWrite(ENB_B, speed);
  }
}

void handleStop() {
  digitalWrite(IN1_A, LOW);
  digitalWrite(IN2_A, LOW);
  analogWrite(ENA_A, 0);

  digitalWrite(IN3_A, LOW);
  digitalWrite(IN4_A, LOW);
  analogWrite(ENB_A, 0);

  digitalWrite(IN1_B, LOW);
  digitalWrite(IN2_B, LOW);
  analogWrite(ENA_B, 0);

  digitalWrite(IN3_B, LOW);
  digitalWrite(IN4_B, LOW);
  analogWrite(ENB_B, 0);

  server.send(200, "text/plain", "Car Stopped");
}

void handleSetSpeed() {
  if (server.hasArg("value")) {
    speed = server.arg("value").toInt();
    Serial.print("Speed set to: ");
    Serial.println(speed);
  }
  server.send(200, "text/plain", "Speed Updated");
}

void setup() {
  Serial.begin(115200);
  
  pinMode(IN1_A, OUTPUT);
  pinMode(IN2_A, OUTPUT);
  pinMode(ENA_A, OUTPUT);
  pinMode(IN3_A, OUTPUT);
  pinMode(IN4_A, OUTPUT);
  pinMode(ENB_A, OUTPUT);
  pinMode(IN1_B, OUTPUT);
  pinMode(IN2_B, OUTPUT);
  pinMode(ENA_B, OUTPUT);
  pinMode(IN3_B, OUTPUT);
  pinMode(IN4_B, OUTPUT);
  pinMode(ENB_B, OUTPUT);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  server.on("/", handleRoot);
  server.on("/forward", [](){ handleMovement("forward"); });
  server.on("/backward", [](){ handleMovement("backward"); });
  server.on("/left", [](){ handleMovement("left"); });
  server.on("/right", [](){ handleMovement("right"); });
  server.on("/stop", handleStop);
  server.on("/setSpeed", handleSetSpeed);

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}

void handleRoot() {
  String html = R"rawliteral(
    <html>
      <head>
        <title>ESP32 Car Control</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

        body {
            text-align: center;
            font-family: "Poppins", sans-serif;
  font-weight: 300;
  font-style: normal;
            color: #141313;
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #ffffff; /* Dark background for better contrast */
        }

        .container {
            position: relative;
            width: 200px; /* Increased size for better button spacing */
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color:#ffffff;
            /* background: linear-gradient(135deg, #eeeeee, #444); Subtle gradient */
            border-radius: 15px;
            /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5); Shadow for depth */
        }

        .button {
            position: absolute;
            padding: 15px;
            border: none;
            border-radius: 50%;
            /* border: 2px solid #000000; Vibrant border color */
            background-color: #ffffff; /* White background for buttons */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); /* Enhanced shadow on hover */
            color: #0c0c0c; /* Dark text color for contrast */
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); Shadow for buttons */
            /* transition: background-color 0.3s, box-shadow 0.3s; Smooth transitions */
        }

        .button:hover {
            background-color: #dfdfdf; /* Color change on hover */
            color: white; /* Change text color on hover */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); /* Enhanced shadow on hover */
        }

        .up {
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
        }

        .down {
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
        }

        .left {
            top: 50%;
            left: 10px;
            transform: translateY(-50%);
        }

        .right {
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
        }

        .controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        input[type=range] {
            width: 300px;
            height: 25px;
            margin: 10px;
            accent-color:#e62626; /* Custom color for the range slider */
        }
        </style>
<script>
  var controlActive = {
    forward: false,
    backward: false,
    left: false,
    right: false
  };

  var debounceDelay = 200; // 200 milliseconds debounce time
  var debounceTimeout = {};

  function sendRequest(action) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", action, true);
    xhr.send();
  }

  function setSpeed(value) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "/setSpeed?value=" + value, true);
    xhr.send();
  }

  function debounce(func, delay) {
    return function(...args) {
      if (debounceTimeout[func]) {
        clearTimeout(debounceTimeout[func]);
      }
      debounceTimeout[func] = setTimeout(() => func(...args), delay);
    };
  }

  document.addEventListener('DOMContentLoaded', function() {
    function addControlEvents(id, action) {
      var element = document.getElementById(id);

      function startAction() {
        if (!controlActive[id]) {
          sendRequest(action);
          controlActive[id] = true;
        }
      }

      function stopAction() {
        if (controlActive[id]) {
          sendRequest('/stop');
          controlActive[id] = false;
        }
      }

      var debouncedStart = debounce(startAction, debounceDelay);
      var debouncedStop = debounce(stopAction, debounceDelay);

      // For desktops
      element.addEventListener('mousedown', debouncedStart);
      element.addEventListener('mouseup', debouncedStop);

      // For mobile devices
      element.addEventListener('touchstart', function(e) {
        e.preventDefault(); // Prevents default touch behavior
        debouncedStart();
      });
      element.addEventListener('touchend', function(e) {
        e.preventDefault(); // Prevents default touch behavior
        debouncedStop();
      });
    }

    addControlEvents('forward', '/forward');
    addControlEvents('backward', '/backward');
    addControlEvents('left', '/left');
    addControlEvents('right', '/right');
  });
</script>

      </head>
      <body>
        <h1>ESP32 CAR</h1>
        <div class="container">
          <button class="button up" id="forward"><span class="material-symbols-outlined">keyboard_arrow_up</span></button>
          <button class="button down" id="backward"><span class="material-symbols-outlined">keyboard_arrow_down</span></button>
          <button class="button left" id="left"><span class="material-symbols-outlined">keyboard_arrow_left</span></button>
          <button class="button right" id="right"><span class="material-symbols-outlined">keyboard_arrow_right</span></button>
        </div>
        <div class="controls">
          <h2 for="speedRange">Speed</h2>
          <input type="range" id="speedRange" min="0" max="255" value="255" onchange="setSpeed(this.value)">
        </div>
      </body>
    </html>
  )rawliteral";

  server.send(200, "text/html", html);
}
